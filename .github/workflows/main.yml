name: CI-CD

on:
    push:
        branches:
            - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    SERVER_PRODUCTION_IP: '51.210.179.153'
    SERVER_PRODUCTION_USER: 'root'

jobs:
    tests-frontend:
        name: tests-frontend-node-${{ matrix.node_version }}
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
                working-directory: ./frontend
        strategy:
            matrix:
                node_version: [18, 20]
        steps:
            # CHECKOUT - https://github.com/actions/checkout
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'checkout' pour cloner le code source du dépôt dans l'environnement de build.
            - name: Clonage du code source avec l'action checkout
              uses: actions/checkout@v4

            # CHECKOUT - https://github.com/actions/setup-node
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'setup-node' pour installer NodeJS
            - name: Installation de NodeJS avec l'action setup-node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node_version }}
                  cache: 'npm'
                  cache-dependency-path: ./frontend/package-lock.json

            - name: Vérification des dépendances
              run: npm audit --audit-level=moderate
              continue-on-error: true # Permet de continuer si celle-ci échoue

            - name: Correction automatique des dépendances
              if: ${{ failure() }}
              run: npm audit fix

            - name: Installation des dépendances
              run: npm ci --prefer-offline

            - name: Utilisation d'un Linter
              run: npm run lint

    tests-backend:
        name: tests-backend-node-${{ matrix.node_version }}
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
                working-directory: ./node-api
        strategy:
            matrix:
                node_version: [18, 20]
        steps:
            # CHECKOUT - https://github.com/actions/checkout
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'checkout' pour cloner le code source du dépôt dans l'environnement de build.
            - name: Clonage du code source avec l'action checkout
              uses: actions/checkout@v4

            # CHECKOUT - https://github.com/actions/setup-node
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'setup-node' pour installer NodeJS
            - name: Installation de NodeJS avec l'action setup-node
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node_version }}
                  cache: 'npm'
                  cache-dependency-path: ./node-api/package-lock.json

            - name: Vérification des dépendances
              run: npm audit --audit-level=moderate
              continue-on-error: true # Permet de continuer si celle-ci échoue

            - name: Correction automatique des dépendances
              if: ${{ failure() }}
              run: npm audit fix

            - name: Installation des dépedances
              run: npm ci --prefer-offline

            - name: run linter
              run: npm run lint

            - name: Exécution des tests unitaires
              run: npm run test:ci

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3
              env:
                  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    build-image-docker:
        needs:
            - tests-frontend
            - tests-backend
        runs-on: ubuntu-latest
        permissions:
            packages: write
        strategy:
            matrix:
                include:
                    - cible: 'frontend'
                      full_image_name: ghcr.io/${{ github.repository }}/frontend
                    - cible: 'node-api'
                      full_image_name: ghcr.io/${{ github.repository }}/node-api
        steps:
            # CHECKOUT - https://github.com/actions/checkout
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'checkout' pour cloner le code source du dépôt dans l'environnement de build.
            - name: Clonage du code source avec l'action checkout
              uses: actions/checkout@v4

            # QEMU - https://github.com/docker/setup-qemu-action
            # ------------------------------------------------------------------------------------------------------
            # Configure QEMU pour supporter les architectures matérielles multiples dans le processus de build.
            - name: Configuration de QEMU
              uses: docker/setup-qemu-action@v3

            # BUILDX - https://github.com/docker/setup-buildx-action
            # ------------------------------------------------------------------------------------------------------
            # Met en place Docker Buildx pour améliorer les builds Docker avec des fonctionnalités avancées,
            # telles que la mise en cache.
            # ATTENTION à bien avoir le nom du répertoire (reposiory) en minuscule !! c'est impératif
            - name: Mise en place de Docker Buildx
              uses: docker/setup-buildx-action@v3

            # LOGIN-ACTION - https://github.com/docker/login-action
            # ------------------------------------------------------------------------------------------------------
            # Authentification sécurisée au Github Container Registry pour permettre le push des images Docker.
            - name: Authentification au Github Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor}}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # METADATA-ACTION - https://github.com/docker/metadata-action/
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action 'docker/metadata-action' pour créer des métadonnées pertinentes pour l'image Docker.
            - name: Génération des métadonnées pour l'image Docker
              id: metadata
              uses: docker/metadata-action@v5
              with:
                  images: ${{ matrix.full_image_name }}

            # BUILD-PUSH-ACTION - https://github.com/docker/build-push-action
            # ------------------------------------------------------------------------------------------------------
            # Construit l'image Docker à partir du Dockerfile et la pousse vers le registre spécifié,
            # avec gestion de la mise en cache.
            - name: Build et push de l'image Docker
              uses: docker/build-push-action@v5
              with:
                  push: true
                  tags: ${{ matrix.full_image_name }}:latest
                  context: ./${{ matrix.cible }}
                  cache-from: type=gha # gha = Permet de spécifier où sont stockés les images. (Ici dans github Actions "gha")
                  cache-to: type=gha,mode=max # Force la mise à jour du cache qui permet d'avoir toujours un cache à jour

    tests-end-2-end:
        needs: build-image-docker
        runs-on: ubuntu-latest
        steps:
            # CHECKOUT - https://github.com/actions/checkout
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'checkout' pour cloner le code source du dépôt dans l'environnement de build.
            - name: Clonage du code source avec l'action checkout
              uses: actions/checkout@v4

            # LOGIN-ACTION - https://github.com/docker/login-action
            # ------------------------------------------------------------------------------------------------------
            # Authentification sécurisée au Github Container Registry pour permettre le push des images Docker.
            - name: Authentification au Github Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor}}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Démarrage des tests end-2-end (e2e)
              run: docker compose up --exit-code-from cypress --abort-on-container-exit

            - name: Nettoyage
              run: docker compose down -v --remove-orphans

    deploy-production:
        needs: tests-end-2-end
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        environment:
            name: production
            url: http://${{ env.SERVER_PRODUCTION_IP }}
        steps:
            # CHECKOUT - https://github.com/actions/checkout
            # ------------------------------------------------------------------------------------------------------
            # Utilise l'action GitHub 'checkout' pour cloner le code source du dépôt dans l'environnement de build.
            - name: Clonage du code source avec l'action checkout
              uses: actions/checkout@v4

            - name: Déploiement sur le serveur de production
              run: |
                  eval $(ssh-agent -s)
                  ssh-add - <<< "${{ secrets.VPS_KEY }}"
                  mkdir -p ~/.ssh
                  ssh-keyscan -H ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
                  scp docker-compose.production.yml ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }}:/root/docker-compose.production.yml
                  ssh ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker login ghcr.io -u ${{ github.actor }}" -p ${{ secrets.GITHUB_TOKEN }}
                  ssh ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker compose -f /root/docker-compose.production.yml up -d --force-recreate"

            - name: Voir si l'application tourne bien
              run: docker compose -f docker-compose.production.yml logs

            - name: Vérification de l'état du service
              run: docker compose -f docker-compose.production.yml top
